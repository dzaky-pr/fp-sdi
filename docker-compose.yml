# docker-compose.yml
# Benchmark Vector Databases: Qdrant vs Weaviate
# Mengikuti metodologi paper rujukan dengan fokus pada perbandingan HNSW-based systems
# Milvus dikecualikan karena resource-intensive dan sering unstable di macOS/laptop

x-common-env: &common_env
  TZ: Asia/Jakarta

# Gunakan NVME_ROOT untuk NVMe internal macOS; default ke ./nvme jika tidak set.
# export NVME_ROOT=/Users/dzakyrifai/nvme-vdb (contoh setup aman untuk macOS internal SSD)
services:
  # ============================================================================
  # QDRANT - Vector Database dengan HNSW Index
  # ============================================================================
  qdrant:
    image: qdrant/qdrant:v1.14.1
    container_name: qdrant
    environment: { <<: *common_env }
    ports: ["6333:6333", "6334:6334"]
    volumes:
      - ${NVME_ROOT:-./nvme}/qdrant:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/healthz"]
      interval: 10s
      timeout: 5s
      retries: 30

  # ============================================================================
  # WEAVIATE - Vector Database dengan HNSW Index
  # ============================================================================
  weaviate:
    image: semitechnologies/weaviate:1.31.0
    container_name: weaviate
    environment:
      <<: *common_env
      AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED: "true"
      PERSISTENCE_DATA_PATH: /var/lib/weaviate
      CLUSTER_HOSTNAME: "node1"
      QUERY_DEFAULTS_LIMIT: "10"
      ENABLE_MODULES: ""
    ports: ["8080:8080"]
    volumes:
      - ${NVME_ROOT:-./nvme}/weaviate:/var/lib/weaviate
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 10s
      timeout: 5s
      retries: 30

  # ============================================================================
  # BENCH - Container untuk menjalankan benchmark
  # ============================================================================
  bench:
    build: ./bench
    container_name: bench
    stdin_open: true
    tty: true
    environment:
      <<: *common_env
      DATA_ROOT: /datasets
    volumes:
      - ./bench:/app
      - ./datasets:/datasets
      - /var/run/docker.sock:/var/run/docker.sock
    command: ["sleep", "infinity"]
    depends_on:
      qdrant:
        condition: service_healthy
      weaviate:
        condition: service_healthy

  # ============================================================================
  # FIO - Container untuk I/O baseline testing (opsional)
  # ============================================================================
  fio:
    image: alpine:3.20
    container_name: fio
    profiles: ["fio"]
    entrypoint:
      ["/bin/sh", "-lc", "apk add --no-cache fio && tail -f /dev/null"]
    volumes:
      - ${NVME_ROOT:-./nvme}/fio:/target

volumes:
  temp_nvme:
    driver: local
    driver_opts:
      type: tmpfs
      device: tmpfs
